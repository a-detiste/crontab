Subject: Support pam_env
Last-Update: 2010-04-11

Enable use of pam_env for cron's environment.

IMPORTANT NOTE: This currently only (or mostly) affects commands launched by
crontab entries. Other commands run (such as mail notification via MAILTO) do
not use this code. This is not really that big of an issue (eg. why would
anyone force MAILTO via /etc/environment), but it should be documented
somewhere.

Bug-Debian: http://bugs.debian.org/203737
Bug-Debian: http://bugs.debian.org/511684
Index: patched/do_command.c
===================================================================
--- patched.orig/do_command.c	2010-05-06 18:18:47.437435738 +0200
+++ patched/do_command.c	2010-05-06 18:18:48.182560885 +0200
@@ -46,6 +46,31 @@
 static void		child_process __P((entry *, user *)),
 			do_univ __P((user *));
 
+/* Build up the job environment from the PAM environment plus the
+   crontab environment */
+static char ** build_env(char **cronenv)
+{
+        char **jobenv = cronenv;
+#if defined(USE_PAM)
+        char **pamenv = pam_getenvlist(pamh);
+        char *cronvar;
+        int count = 0;
+
+        jobenv = env_copy(pamenv);
+
+        /* Now add the cron environment variables. Since env_set()
+           overwrites existing variables, this will let cron's
+           environment settings override pam's */
+
+        while ((cronvar = cronenv[count++])) {
+                if (!(jobenv = env_set(jobenv, cronvar))) {
+                        syslog(LOG_ERR, "Setting Cron environment variable %s failed", cronvar);
+                        return NULL;
+                }
+        }
+#endif
+    return jobenv;
+}
 
 void
 do_command(e, u)
@@ -296,8 +321,8 @@
 		/* exec the command.
 		 */
 		{
-			char	*shell = env_get("SHELL", e->envp);
-
+                        char    **jobenv = build_env(e->envp); 
+                        char	*shell = env_get("SHELL", jobenv);
 # if DEBUGGING
 			if (DebugFlags & DTEST) {
 				fprintf(stderr,
@@ -307,7 +332,7 @@
 				_exit(OK_EXIT);
 			}
 # endif /*DEBUGGING*/
-			execle(shell, shell, "-c", e->cmd, (char *)0, e->envp);
+                        execle(shell, shell, "-c", e->cmd, (char *)0, jobenv);
 			fprintf(stderr, "%s: execle: %s\n", shell, strerror(errno));
 			_exit(ERROR_EXIT);
 		}
