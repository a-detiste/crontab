Subject: Correct use of error messages
Author: Justin Pryzby <justinpryzby@users.sourceforge.net>
Last Update: 2004-10-11

Fix the use of perror so that the error message is correct when printing the
reason why an operation failed. Thanks to Justin Pryzby for the patch.

Debian-Bug: http://bugs.debian/org/470587

Acked-by: Christian Kastner <debian@kvr.at>
Index: patched/do_command.c
===================================================================
--- patched.orig/do_command.c	2010-05-06 18:18:28.216436280 +0200
+++ patched/do_command.c	2010-05-06 18:18:28.844435899 +0200
@@ -229,8 +229,7 @@
 			}
 # endif /*DEBUGGING*/
 			execle(shell, shell, "-c", e->cmd, (char *)0, e->envp);
-			fprintf(stderr, "execl: couldn't exec `%s'\n", shell);
-			perror("execl");
+			fprintf(stderr, "%s: execle: %s\n", shell, strerror(errno));
 			_exit(ERROR_EXIT);
 		}
 		break;
Index: patched/misc.c
===================================================================
--- patched.orig/misc.c	2010-05-06 18:18:28.217435826 +0200
+++ patched/misc.c	2010-05-06 18:18:28.844435899 +0200
@@ -200,8 +200,7 @@
 			fprintf(stderr, "%s: created\n", CRONDIR);
 			stat(CRONDIR, &sb);
 		} else {
-			fprintf(stderr, "%s: ", CRONDIR);
-			perror("mkdir");
+			fprintf(stderr, "%s: mkdir: %s\n", CRONDIR, strerror(errno));
 			exit(ERROR_EXIT);
 		}
 	}
@@ -211,8 +210,7 @@
 		exit(ERROR_EXIT);
 	}
 	if (chdir(CRONDIR) < OK) {
-		fprintf(stderr, "cannot chdir(%s), bailing out.\n", CRONDIR);
-		perror(CRONDIR);
+		fprintf(stderr, "%s: chdir: %s\n", CRONDIR, strerror(errno));
 		exit(ERROR_EXIT);
 	}
 
@@ -224,8 +222,7 @@
 			fprintf(stderr, "%s: created\n", SPOOL_DIR);
 			stat(SPOOL_DIR, &sb);
 		} else {
-			fprintf(stderr, "%s: ", SPOOL_DIR);
-			perror("mkdir");
+			fprintf(stderr, "%s: mkdir: %s\n", SPOOL_DIR, strerror(errno));
 			exit(ERROR_EXIT);
 		}
 	}
@@ -487,9 +484,8 @@
 	if (LogFD < OK) {
 		LogFD = open(LOG_FILE, O_WRONLY|O_APPEND|O_CREAT, 0600);
 		if (LogFD < OK) {
-			fprintf(stderr, "%s: can't open log file\n",
-				ProgramName);
-			perror(LOG_FILE);
+			fprintf(stderr, "%s: %s: open: %s\n",
+				ProgramName, LOG_FILE, strerror(errno));
 		} else {
 			(void) fcntl(LogFD, F_SETFD, 1);
 		}
Index: patched/crontab.c
===================================================================
--- patched.orig/crontab.c	2010-05-06 18:18:28.216436280 +0200
+++ patched/crontab.c	2010-05-06 18:18:28.844435899 +0200
@@ -256,10 +256,11 @@
 	log_it(RealUser, Pid, "LIST", User);
 	(void) snprintf(n, MAX_FNAME, CRON_TAB(User));
 	if (!(f = fopen(n, "r"))) {
-		if (errno == ENOENT)
+		if (errno == ENOENT) 
 			fprintf(stderr, "no crontab for %s\n", User);
-		else
-			perror(n);
+		else {
+                        fprintf(stderr, "%s/: fopen: %s\n", n, strerror(errno));
+                }
 		exit(ERROR_EXIT);
 	}
 
@@ -281,8 +282,9 @@
 	if (unlink(n)) {
 		if (errno == ENOENT)
 			fprintf(stderr, "no crontab for %s\n", User);
-		else
-			perror(n);
+		else {
+                        fprintf(stderr, "%s/: unlink: %s\n", CRONDIR, strerror(errno));
+                }
 		exit(ERROR_EXIT);
 	}
 	poke_daemon();
@@ -312,7 +314,7 @@
 	(void) snprintf(n, MAX_FNAME, CRON_TAB(User));
 	if (!(f = fopen(n, "r"))) {
 		if (errno != ENOENT) {
-			perror(n);
+                        fprintf(stderr, "%s/: fdopen: %s", n, strerror(errno));
 			exit(ERROR_EXIT);
 		}
 		fprintf(stderr, "no crontab for %s - using an empty one\n",
@@ -535,8 +537,8 @@
 	fflush(tmp);  rewind(tmp);
 
 	if (ferror(tmp)) {
-		fprintf(stderr, "%s: error while writing new crontab to %s\n",
-			ProgramName, tn);
+		fprintf(stderr, "%s: %s: %s\n",
+			ProgramName, tn, strerror(errno));
 		fclose(tmp);  unlink(tn);
 		return (-2);
 	}
@@ -601,9 +603,8 @@
 
 	(void) snprintf(n, sizeof(n), CRON_TAB(User));
 	if (rename(tn, n)) {
-		fprintf(stderr, "%s: error renaming %s to %s\n",
-			ProgramName, tn, n);
-		perror("rename");
+		fprintf(stderr, "%s: %s: rename: %s\n",
+			ProgramName, n, strerror(errno));
 		unlink(tn);
 		return (-2);
 	}
@@ -624,14 +625,14 @@
 	(void) gettimeofday(&tvs[0], &tz);
 	tvs[1] = tvs[0];
 	if (utimes(SPOOL_DIR, tvs) < OK) {
-		fprintf(stderr, "crontab: can't update mtime on spooldir\n");
-		perror(SPOOL_DIR);
+                fprintf(stderr, "%s/: utimes: %s", CRONDIR, strerror(errno));
+		fputs("crontab: can't update mtime on spooldir\n", stderr);
 		return;
 	}
 #else
 	if (utime(SPOOL_DIR, NULL) < OK) {
-		fprintf(stderr, "crontab: can't update mtime on spooldir\n");
-		perror(SPOOL_DIR);
+                fprintf(stderr, "%s: utime: %s\n", CRONDIR, strerror(errno));
+		fputs("crontab: can't update mtime on spooldir\n", stderr);
 		return;
 	}
 #endif /*USE_UTIMES*/
