Subject: Proper handling of standard streams
Last-Update: 2010-04-11

Fixes related to stdin, stdout, stderr WRT to daemonizing, etc.

Debian-Bug: http://bugs.debian.org/295589
Debian-Bug: http://bugs.debian.org/37189
Debian-Bug: http://bugs.debian.org/23231
Debian-Bug: http://bugs.debian.org/30653

Acked-by: Christian Kastner <debian@kvr.at>
Index: patched/cron.c
===================================================================
--- patched.orig/cron.c	2010-05-06 18:18:22.672435408 +0200
+++ patched/cron.c	2010-05-06 18:18:29.548561115 +0200
@@ -31,6 +31,8 @@
 # include <time.h>
 #endif
 
+#include <sys/types.h>
+#include <fcntl.h>
 
 static	void	usage __P((void)),
 		run_reboot_jobs __P((cron_db *)),
@@ -74,6 +76,13 @@
 #endif
 	(void) signal(SIGHUP, sighup_handler);
 
+        /* Reopen stdin in case some idiot closed it before starting
+           us - it will only be closed, but not having it open here
+           screws up other things that will be opened */
+        if (fdopen(0,"r") == NULL) {
+            (void) open("dev/null", 0);
+        }
+
 	acquire_daemonlock(0);
 	set_cron_uid();
 	set_cron_cwd();
@@ -100,6 +109,9 @@
 			/* child process */
 			log_it("CRON",getpid(),"STARTUP","fork ok");
 			(void) setsid();
+			freopen("/dev/null", "r", stdin);
+			freopen("/dev/null", "w", stdout);
+			freopen("/dev/null", "w", stderr);
 			break;
 		default:
 			/* parent process should just die */
Index: patched/do_command.c
===================================================================
--- patched.orig/do_command.c	2010-05-06 18:18:28.844435899 +0200
+++ patched/do_command.c	2010-05-06 18:18:29.548561115 +0200
@@ -189,9 +189,12 @@
 		/* grandchild process.  make std{in,out} be the ends of
 		 * pipes opened by our daddy; make stderr go to stdout.
 		 */
-		close(STDIN);	dup2(stdin_pipe[READ_PIPE], STDIN);
-		close(STDOUT);	dup2(stdout_pipe[WRITE_PIPE], STDOUT);
-		close(STDERR);	dup2(STDOUT, STDERR);
+		/* Closes are unnecessary -- let dup2() do it */
+
+		  /* close(STDIN) */; dup2(stdin_pipe[READ_PIPE], STDIN);
+		  /* close(STDOUT) */;  dup2(stdout_pipe[WRITE_PIPE], STDOUT);
+		  /* close(STDERR)*/; dup2(STDOUT, STDERR);
+
 
 		/* close the pipes we just dup'ed.  The resources will remain.
 		 */
